---
import northernStation from '@data/northern-station.json'
import southernStation from '@data/southern-station.json'

import type { Question } from 'schema-dts'
import { Schema } from 'astro-seo-schema'

import { Picture } from 'astro-imagetools/components'

import Layout from '@layouts/Layout.astro'

import '@styles/wave.css'

import SocialMedia from '@components/SocialMedia.astro'
import Navbar from '@components/Navbar.astro'
import Greetings from '@components/Greetings.astro'
import CardCity from '@components/CardCity.astro'

export async function getStaticPaths() {
  const mergeDataStations = [northernStation, southernStation]

  return mergeDataStations.map((info) => ({
    params: { terminal: info.slug },
    props: {
      station: info.station,
      location: info.location,
      locationDescription: info.location_description,
      locationMap: info.location_map,
      phone: info.phone,
      stationImage: info.station_image,
      stationImageMobile: info.station_image_mobile,
      socialMediaImage: info.social_media_image,
      themeColor: info.theme_color,
      headerColor: info.header_color,
      titleColor: info.title_color,
      textColor: info.text_color,
      linkColorGroup: info.link_color_group,
      slug: info.slug,
      title: info.title,
      description: info.description,
      schemaFAQs: info.schema_FAQs,
      cities: info.cities
    }
  }))
}

const { terminal } = Astro.params
const {
  station,
  location,
  locationDescription,
  locationMap,
  phone,
  stationImage,
  stationImageMobile,
  socialMediaImage,
  themeColor,
  headerColor,
  titleColor,
  textColor,
  linkColorGroup,
  slug,
  title,
  description,
  schemaFAQs,
  cities
} = Astro.props

const options = {
  title: `${title} | Estelí Buses`,
  description,
  theme_color: themeColor
}

const getSchemaFAQs: Question[] = schemaFAQs.map((faq) => ({
  '@type': 'Question',
  inLanguage: 'es',
  name: faq.name,
  acceptedAnswer: { '@type': 'Answer', text: faq.text }
}))
---

<Layout options={options}>
  <Schema
    item={{
      '@context': 'https://schema.org',
      '@type': 'FAQPage',
      mainEntity: getSchemaFAQs
    }}
    slot="schema"
  />

  <SocialMedia
    {title}
    {description}
    image={socialMediaImage}
    slot="social-media"
  />

  <header class={`relative ${headerColor} safe-top`}>
    <div class="container mx-auto px-4">
      <Navbar />

      <section
        class={`
          flex flex-col items-center justify-center pt-[4.5rem] pb-[4.5rem] text-center
          md:pb-[6.5rem]
          lg:pt-28 lg:pb-[8.5rem]
          xl:pb-56
        `}
      >
        <Greetings />
        <h1 class={`my-4 max-w-4xl ${titleColor}`}>{title}</h1>
        <p class="max-w-2xl lg:max-w-4xl">
          Conoce todos los horarios de la {station} de Estelí y elige la ciudad
          a la que deseas viajar.
        </p>

        <section
          class={`
            mx-auto mt-6 flex max-w-xs flex-col justify-center gap-y-8 text-left
            sm:max-w-md
            md:max-w-xl md:flex-row md:items-start md:gap-x-8 md:gap-y-0
          `}
        >
          <section class="group space-y-1 md:basis-3/5">
            <p class={`font-semibold ${textColor}`}>Ubicación:</p>
            <div class="flex items-start gap-x-2">
              <div class="mt-[0.2rem]">
                <svg class={`fill-current ${textColor}${linkColorGroup}`} viewBox="0 0 24 24" width="24" height="24">
                  <path
                    d="M12 11.5A2.5 2.5 0 0 1 9.5 9 2.5 2.5 0 0 1 12 6.5 2.5 2.5 0 0 1 14.5 9a2.5 2.5 0 0 1-2.5 2.5M12 2a7 7 0 0 0-7 7c0 5.3 7 13 7 13s7-7.8 7-13a7 7 0 0 0-7-7Z"
                  >
                  </path>
                </svg>
              </div>
              <a class={`font-semibold ${textColor}${linkColorGroup}`} href={`${terminal}#mapa`}>
                {location}
              </a>
            </div>
          </section>
          <section class="group space-y-1 md:basis-2/5">
            <p class={`font-semibold ${textColor}`}>Teléfono:</p>
            <div class="flex items-start gap-x-2">
              <svg class={`fill-current ${textColor}${linkColorGroup}`} viewBox="0 0 24 24" width="24" height="24">
                <path
                  d="M6.6 10.8c1.5 2.8 3.8 5.1 6.6 6.6l2.2-2.2a1 1 0 0 1 1-.3c1.2.4 2.4.6 3.6.6a1 1 0 0 1 1 1V20a1 1 0 0 1-1 1A17 17 0 0 1 3 4a1 1 0 0 1 1-1h3.5a1 1 0 0 1 1 1c0 1.3.2 2.5.6 3.6 0 .3 0 .7-.3 1l-2.2 2.2Z"
                >
                </path>
              </svg>
              <a
                class={`font-semibold ${textColor}${linkColorGroup}`}
                href={`tel:${phone}`}
                set:html={station === 'Terminal Norte'
                  ? `${phone} <span class="md:hidden">extensión</span><span class="hidden md:inline">ext.</span> 102`
                  : phone}
              />
            </div>
          </section>
        </section>
      </section>
    </div>
    <div class="wave"></div>
  </header>
  <main class="py-12 sm:py-16 md:py-20 xl:py-28">
    <div class="container mx-auto px-4">
      <article class="mb-16 text-center md:mb-20 xl:mb-28">
        <form class="mx-auto w-full max-w-xl space-y-4" id="search-form" autocomplete="on">
          <label
            class="block text-xl font-semibold text-orange-400 dark:text-orange-50"
            for="search"
          >
            ¿A dónde vas a viajar?
          </label>
          <section
            class={`
              grid grid-cols-[1fr_100px] !shadow-lg !shadow-orange-500/10
              any-hover:!shadow-orange-600/10
            `}
          >
            <input
              id="search"
              type="search"
              class={`
                placeholder-opacity-50
                focus:ring-opacity-50
                block w-full rounded rounded-r-none border border-orange-400 bg-white px-4 py-2.5
                placeholder-orange-600 caret-orange-500 transition-colors outline-none
                focus:border-orange-500 focus:ring-4 focus:ring-orange-400
                dark:bg-[#292018] dark:placeholder-orange-100
              `}
              placeholder="Busca tu ciudad..."
            />
            <button
              id="search-button"
              class={`
                active:ring-opacity-75
                inline-flex items-center justify-center rounded rounded-l-none bg-orange-400 px-5
                py-2.5 text-white transition-colors
                active:ring-4 active:ring-orange-400 active:outline-none
                any-hover:bg-orange-500
              `}
              type="button"
              aria-label={`Buscar ciudades de la ${station}`}
              title={`Buscar ciudades de la ${station}`}
            >
              <svg class="w-4" role="img" viewBox="0 0 512 512">
                <path
                  class="fill-current"
                  d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"
                >
                </path>
              </svg>
            </button>
          </section>
        </form>
      </article>
      <article class="flex flex-wrap justify-center gap-y-20 lg:gap-16">
        {
          cities.map((city) => (
            <CardCity
              cityName={city.name}
              slug={`${slug}/${city.slug}`}
              image={city.image}
            />
          ))
        }
        <section class="hidden space-y-4" id="no-city">
          <p class="text-center text-xl text-[#3b0d15] dark:text-orange-50">
            Por favor intenta otra búsqueda, lo que estás buscando no está
            disponible.
          </p>
          <p class="text-center font-semibold">Ciudades disponibles:</p>
          <nav>
            <ul id="list-cities" class="space-y-4 text-center">
              {
                cities.map((city) => (
                  <li>
                    <a href={`${slug}/${city.slug}`}>{city.name}</a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </section>
      </article>
    </div>
  </main>
  <article class="bg-[#FFFDF9] py-12 text-center sm:py-16 md:py-20 xl:py-28 dark:bg-[#2D231B]">
    <div class="container mx-auto px-4">
      <h2 class="mb-8">Conoce sobre la {station} de Estelí</h2>
      <div class="space-y-4">
        <p class="mx-auto mt-5 mb-4 md:max-w-5xl lg:max-w-6xl" set:html={locationDescription} />
        <figure>
          <Picture
            src={stationImage}
            artDirectives={[
              {
                media:
                  station === 'Terminal Norte'
                    ? '(max-aspect-ratio: 544/726)'
                    : '(max-aspect-ratio: 736/982)',
                src: stationImageMobile,
                breakpoints: station === 'Terminal Norte' ? [600] : [912],
                width: station === 'Terminal Norte' ? 544 : 736,
                height: station === 'Terminal Norte' ? 726 : 982
              }
            ]}
            alt={`${station} de la ciudad de Estelí`}
            decoding="async"
            attributes={{
              img: {
                fetchpriority: 'low'
              }
            }}
            aspect={1.777777778}
            loading="lazy"
          />
          <figcaption class="mt-3 text-sm text-gray-400 dark:text-gray-200">
            {station} de la ciudad de Estelí.
          </figcaption>
        </figure>
        <h3 class="!mt-14">Ubicación de la {station}</h3>
        <iframe
          class="mx-auto !mt-14 w-full max-w-5xl rounded border-0 bg-[#eee] dark:bg-[#362d25]"
          id="mapa"
          src={locationMap}
          allowfullscreen="allowfullscreen"
          loading="lazy"
          height="450"
          fetchpriority="low"
          title={`Ubicación de la ${station}`}
        >
        </iframe>
        <p class="!mt-3 text-sm text-gray-400 dark:text-gray-200">
          Ubicación de la {station} de la ciudad de Estelí.
        </p>
      </div>
    </div>
  </article>
</Layout>

<script>
  const $ = (sel: string) => document.getElementById(sel)
  const $$ = (sel: string) => document.querySelectorAll(sel)

  const searchForm = $('search-form')
  const search = $('search') as HTMLInputElement

  const cityName = $$('.city-name') as NodeListOf<HTMLElement>
  const cardCities = $$('.card-city')

  const noCity = $('no-city')

  searchForm?.addEventListener('input', (e) => {
    if ((e.target as HTMLInputElement).id === 'search') {
      /*
       * Sanitize user input.
       * - Normalize text using Canonical Decomposition (NFD).
       * - Replace Spanish letters that have accents (\u0300-\u036f) with a
       * empty value, due NFD sanitization is used for such characters.
       * - Replace whitespaces with middle dash.
       */
      const sanitizeInput = search.value
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/\s/g, '-')

      for (let i = 0; i < cardCities.length; i++) {
        const name = cityName[i].textContent || cityName[i].innerText
        const sanitizeName = name
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .replace(/\s/g, '-')

        if (sanitizeName.indexOf(sanitizeInput) > -1) {
          cardCities[i].classList.remove('hidden')
        } else {
          cardCities[i].classList.add('hidden')
        }
      }

      if ($$('.card-city.hidden').length === cardCities.length) {
        noCity?.classList.remove('hidden')
      } else {
        noCity?.classList.add('hidden')
      }

      if (search.value === '') {
        cardCities.forEach((cardCity) => cardCity.classList.remove('hidden'))
      }
    }
  })

  searchForm?.addEventListener('submit', (e) => e.preventDefault())

  const bottomBar = $('bottom-bar')

  const isMobile = navigator.userAgent.match(/Android|iPhone|iPad|iPod/i)

  /**
   * Hide BottomBar when the virtual keyboard is open using the resize window
   * event to detect it.
   */

  const initialSize = window.innerHeight

  if (isMobile) {
    window.addEventListener('resize', () => {
      const resizeHeight = window.innerHeight

      const percent = initialSize / resizeHeight

      if (percent > 1.35) {
        bottomBar?.classList.remove('sticky')
      } else {
        bottomBar?.classList.add('sticky')
      }
    })
  }
</script>
